/*
    CSCE 315-501
    Jonathan Sandell, Vyas Sathya, Esteban Solis, Josh Orndorff
    Project 3 - Final submission
    12/10/2014

    Description: A class to represent XML objects internally. Used both for storage and reading
    of settings XML file and for XML data retrieved from APIs.

    Information on working with XML files came from the Android developer reference

    NOTE: Much of the code and comments in the .java files (and others) were auto-generated by Android Studio

*/

package com.dangerindexapp.team9.project_3_team_9;



import java.util.ArrayList;
import java.util.Collections;
import java.util.Dictionary;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

/**
 * Created by Josh on 11/20/2014.
 */
public class XMLObj {
    private Map<String, XMLObj> properties;     // map from Strings to XMLObjs
    private ArrayList<XMLObj> contents;         // array of XMLObjs
    private Map<String, String> attributes;     // attributes of XMLObj
    private String name;                        // name
    private String singletonValue;              // value if XMLObj is a singleton (no XMLObj contents)

    // Add both as dictionary-indexed property and element in numbered list
    public void addProperty(String prop, XMLObj val) {
        properties.put(prop, val);  // dictionary
        contents.add(val);          // list
    }

    // Add an attribute
    public void addAttribute(String key, String value) {
        attributes.put(key, value);
    }

    // Get XMLObj by string name
    public XMLObj getXMLObj(String prop) {
        return properties.get(prop);
    }

    // Get XMLObj name by string name (contents if XMLObj is a singleton)
    public String getString(String prop) {
        return properties.get(prop).getSingletonValue();
    }

    // Return the singleton value
    public String getSingletonValue() {
        return singletonValue;
    }

    // Set the singleton value
    public void setSingletonValue(String val) {
        singletonValue = val;
    }

    // Get contents as a float by string name
    public float getFloat(String prop) {
        try {
            return Float.parseFloat(getString(prop));
        }
        catch(Exception exc) {}
        return -99999999;
    }

    // Get XMLObj by index (used in case of multiple elements)
    public XMLObj getElement(int i) { return contents.get(i); }

    // Get attribute value by name
    public String getAttribute(String k) { return attributes.get(k); }

    // Get number of elements
    public int size() {return contents.size();}

    // Return a list of the property names
    public Set properties() {
        return properties.keySet();
    }

    // Construct empty XMLObj with name nm
    public XMLObj(String nm) {
        name = nm;
        properties = new HashMap<String, XMLObj>();
        attributes = new HashMap<String, String>();
        contents = new ArrayList<XMLObj>();
    }

    // Construct singleton XMLObj with name nm and value val
    public XMLObj(String nm, String val) {
        name = nm;
        properties = new HashMap<String, XMLObj>();
        attributes = new HashMap<String, String>();
        contents = new ArrayList<XMLObj>();
        singletonValue = val;
    }

    // Return name of XMLObj
    public String getName() {
        return name;
    }

    // Return whether XMLObj is a singleton
    public boolean isSingleton() {
        return (properties.size() == 0);
    }

    // Return string representation of XMLObj
    public String toString() {
        return toString(0);
    }

    // Helper function to return number of tabs needed based on depth (for toString)
    private String depthTabs(int depth) {
        String s = "";
        for (int i = 0; i < depth; i++) s+="\t";
        return s;
    }

    // Set contents of XMLObj to contents of list
    public void setContents(ArrayList<XMLObj> list) { contents = list; }

    // Set attributes of XMLObj to contents of attr
    public void setAttributes(Map<String, String> attr) {
        attributes = attr;
    }

    // Helper function to recursively return string representation of XMLObj (in XML format)
    private String toString (int depth) {
        String str = depthTabs(depth) + "<" + name; // start tag
        Set<Map.Entry<String, String>> entrySet = attributes.entrySet();    // add attributes
        for (Map.Entry<String, String> ent : entrySet) {
            str += " " + ent.getKey() + "=\"" + ent.getValue() + "\"";
        }
        str += ">";                                 // finish start tag
        if (isSingleton() && singletonValue != null) str += singletonValue;   // just add value for singleton
        else {              // for non-singleton, recursively add XML properties
            str += "\n";
            for (int i = 0; i < contents.size(); i++) {
                str += contents.get(i).toString(depth + 1) + "\n";
            }
            str += depthTabs(depth);
        }
        str += "</" + name + ">";                   // add closing tag
        return str;
    }
}
